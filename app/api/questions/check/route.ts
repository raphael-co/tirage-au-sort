import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import { getServerSession } from "next-auth";
import { authOptions } from "@/utils/authOptions";

const prisma = new PrismaClient();

/**
 * GET /api/questions/check
 * üîπ V√©rifie si l'utilisateur a r√©pondu √† toutes les questions
 */
export async function GET() {
  try {
    // R√©cup√®re la session utilisateur
    const session = await getServerSession(authOptions);
    if (!session || !session.user?.id) {
      return NextResponse.json({ error: "Utilisateur non authentifi√©" }, { status: 401 });
    }

    const userId = session.user.id;

    // R√©cup√©rer le nombre total de questions
    const totalQuestions = await prisma.question.count();
    if (totalQuestions === 0) {
      return NextResponse.json({ message: "Aucune question disponible" }, { status: 201 });
    }

    // R√©cup√©rer le nombre de r√©ponses donn√©es par l'utilisateur
    const answeredQuestions = await prisma.answer.count({
      where: { userId },
    });

    // ‚úÖ Si toutes les questions ont une r√©ponse, renvoyer un statut 204
    if (answeredQuestions >= totalQuestions) {
      return new Response(null, { status: 204 }); // ‚úÖ 204 No Content
    }

    // ‚ùå Si des questions restent √† r√©pondre, les r√©cup√©rer
    const unansweredQuestions = await prisma.question.findMany({
      where: {
        id: {
          notIn: (
            await prisma.answer.findMany({
              where: { userId },
              select: { questionId: true },
            })
          ).map((a) => a.questionId),
        },
      },
    });

    return NextResponse.json({ questions: unansweredQuestions }, { status: 200 });
  } catch (error) {
    console.error(error);
    return NextResponse.json(
      { error: "Erreur lors de la v√©rification des r√©ponses" },
      { status: 500 }
    );
  }
}
